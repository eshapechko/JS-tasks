// Основы

// Array.prototype.map — это функция, которая принимает функцию обратного вызова и объект в качестве «контекста».
// Функция обратного вызова должна получить текущий элемент, его индекс и сам объект массива.
// Контекст будет внутри thisфункции обратного вызова
// ПРИМЕЧАНИЕ

// Вы должны принять во внимание, что массив, созданный с помощью []и a new Array(length), полностью отличается по содержимому, которым они обладают, и вы должны учитывать это в момент создания своего решения.
// Лучшая иллюстрация для этого:
// [1, 2, 3]; // { '0': 1, '1': 2, '2': 3, length: 3 }
// new Array(3); // { length: 3 }

// [1, 2, 3].concat([4]); // { '0': 1, '1': 2, '2': 3, '3': 4, length: 4 }
// new Array(3).concat([4]); // { '3': 4, length: 4 }
// Тем не менее, вы должны применять функцию обратного вызова только к элементам, которые есть в массиве.
// Тем не менее, счастливого кодирования.

// #О, чуть не забыл Ваша реализация этой функции карты не должна изменять текущий массив

// var base_array = [1, 2, 3, 4, 5];
// var mapped_array = base_array.map(function(item) { return item + 2 });

// console.log(base_array); // [1, 2, 3, 4, 5]
// console.log(mapped_array); // [3, 4, 5, 6, 7]

Array.prototype.map = function (callback, context) {
  const length = this.length;
  const arr = new Array(length);
  for (let i = 0; i < length; i++) {
    if (i in this) {
      arr[i] = callback.call(context, this[i], i, this);
    }
  }
  return arr;
};
